/* 
Tested on Teensy LC and one 74HC165 shift register
pull-down resitor on shift reg 3
strobe pin 16 on shift reg 3

74HC165 is not an SPI device
SH/LD is connected to Teensy SS
Shift or Load input:
    When High Data, shift the data toward a serial output
    When Low data, enable parallel inputs to registers
    datasheet p12 Fig 4. Typical Shift, Load, and Inhibit Sequence

Scanner_ShiftRegsPISOMultiRow::scan() digitalWrite(slaveSelect, HIGH) is left HIGH after strobeOff
could move LOW to after strobe off, but then data in parallel inputs would be old
see how LarryD did it
*/
// ################## GLOBAL ###################
// ================= INCLUDES ==================
#include <Scanner_ShiftRegsPISOMultiRow.h>

// --------------- LEFT SCANNER ----------------
const uint8_t SS_L=10;
const uint8_t SS_R=9;

uint8_t scan(const uint8_t slaveSelect)
{
    read_pins_t readState = 0;                  //bits, 1 means key is pressed, 0 means released

    //read all the column pins
    digitalWrite(slaveSelect, HIGH);            //shift the data toward a serial output

    SPI.transfer(&readState, 1);
    digitalWrite(slaveSelect, LOW);             //enable parallel inputs to registers
    return readState;
}

// ################### MAIN ####################
void setup()
{
    uint8_t readState;

    delay(3000);
    Keyboard.print("3 ");
    delay(3000);

    SPI.begin();

    //initilize SS_L
    pinMode(SS_L, OUTPUT);
    digitalWrite(SS_L, LOW);

    //SS_L
    readState = scan(SS_L);
    Keyboard.print("readState_L=");
    Keyboard.print(readState);                  //8
/*
    //initilize SS_R
    pinMode(SS_R, OUTPUT);
    digitalWrite(SS_R, LOW);

    //delay(10);

    //SS_R
    readState = scan(SS_R);
    Keyboard.print("    readState_R=");
    Keyboard.println(readState);                //2
*/
}

void loop() { }
